// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Departments", testDepartments)
	t.Run("DeptEmps", testDeptEmps)
	t.Run("DeptManagers", testDeptManagers)
	t.Run("Employees", testEmployees)
	t.Run("Salaries", testSalaries)
	t.Run("Titles", testTitles)
}

func TestSoftDelete(t *testing.T) {
	t.Run("Employees", testEmployeesSoftDelete)
}

func TestQuerySoftDeleteAll(t *testing.T) {
	t.Run("Employees", testEmployeesQuerySoftDeleteAll)
}

func TestSliceSoftDeleteAll(t *testing.T) {
	t.Run("Employees", testEmployeesSliceSoftDeleteAll)
}

func TestDelete(t *testing.T) {
	t.Run("Departments", testDepartmentsDelete)
	t.Run("DeptEmps", testDeptEmpsDelete)
	t.Run("DeptManagers", testDeptManagersDelete)
	t.Run("Employees", testEmployeesDelete)
	t.Run("Salaries", testSalariesDelete)
	t.Run("Titles", testTitlesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Departments", testDepartmentsQueryDeleteAll)
	t.Run("DeptEmps", testDeptEmpsQueryDeleteAll)
	t.Run("DeptManagers", testDeptManagersQueryDeleteAll)
	t.Run("Employees", testEmployeesQueryDeleteAll)
	t.Run("Salaries", testSalariesQueryDeleteAll)
	t.Run("Titles", testTitlesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Departments", testDepartmentsSliceDeleteAll)
	t.Run("DeptEmps", testDeptEmpsSliceDeleteAll)
	t.Run("DeptManagers", testDeptManagersSliceDeleteAll)
	t.Run("Employees", testEmployeesSliceDeleteAll)
	t.Run("Salaries", testSalariesSliceDeleteAll)
	t.Run("Titles", testTitlesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Departments", testDepartmentsExists)
	t.Run("DeptEmps", testDeptEmpsExists)
	t.Run("DeptManagers", testDeptManagersExists)
	t.Run("Employees", testEmployeesExists)
	t.Run("Salaries", testSalariesExists)
	t.Run("Titles", testTitlesExists)
}

func TestFind(t *testing.T) {
	t.Run("Departments", testDepartmentsFind)
	t.Run("DeptEmps", testDeptEmpsFind)
	t.Run("DeptManagers", testDeptManagersFind)
	t.Run("Employees", testEmployeesFind)
	t.Run("Salaries", testSalariesFind)
	t.Run("Titles", testTitlesFind)
}

func TestBind(t *testing.T) {
	t.Run("Departments", testDepartmentsBind)
	t.Run("DeptEmps", testDeptEmpsBind)
	t.Run("DeptManagers", testDeptManagersBind)
	t.Run("Employees", testEmployeesBind)
	t.Run("Salaries", testSalariesBind)
	t.Run("Titles", testTitlesBind)
}

func TestOne(t *testing.T) {
	t.Run("Departments", testDepartmentsOne)
	t.Run("DeptEmps", testDeptEmpsOne)
	t.Run("DeptManagers", testDeptManagersOne)
	t.Run("Employees", testEmployeesOne)
	t.Run("Salaries", testSalariesOne)
	t.Run("Titles", testTitlesOne)
}

func TestAll(t *testing.T) {
	t.Run("Departments", testDepartmentsAll)
	t.Run("DeptEmps", testDeptEmpsAll)
	t.Run("DeptManagers", testDeptManagersAll)
	t.Run("Employees", testEmployeesAll)
	t.Run("Salaries", testSalariesAll)
	t.Run("Titles", testTitlesAll)
}

func TestCount(t *testing.T) {
	t.Run("Departments", testDepartmentsCount)
	t.Run("DeptEmps", testDeptEmpsCount)
	t.Run("DeptManagers", testDeptManagersCount)
	t.Run("Employees", testEmployeesCount)
	t.Run("Salaries", testSalariesCount)
	t.Run("Titles", testTitlesCount)
}

func TestHooks(t *testing.T) {
	t.Run("Departments", testDepartmentsHooks)
	t.Run("DeptEmps", testDeptEmpsHooks)
	t.Run("DeptManagers", testDeptManagersHooks)
	t.Run("Employees", testEmployeesHooks)
	t.Run("Salaries", testSalariesHooks)
	t.Run("Titles", testTitlesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Departments", testDepartmentsInsert)
	t.Run("Departments", testDepartmentsInsertWhitelist)
	t.Run("DeptEmps", testDeptEmpsInsert)
	t.Run("DeptEmps", testDeptEmpsInsertWhitelist)
	t.Run("DeptManagers", testDeptManagersInsert)
	t.Run("DeptManagers", testDeptManagersInsertWhitelist)
	t.Run("Employees", testEmployeesInsert)
	t.Run("Employees", testEmployeesInsertWhitelist)
	t.Run("Salaries", testSalariesInsert)
	t.Run("Salaries", testSalariesInsertWhitelist)
	t.Run("Titles", testTitlesInsert)
	t.Run("Titles", testTitlesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("DeptEmpToEmployeeUsingEmpNoEmployee", testDeptEmpToOneEmployeeUsingEmpNoEmployee)
	t.Run("DeptEmpToDepartmentUsingDeptNoDepartment", testDeptEmpToOneDepartmentUsingDeptNoDepartment)
	t.Run("DeptManagerToEmployeeUsingEmpNoEmployee", testDeptManagerToOneEmployeeUsingEmpNoEmployee)
	t.Run("DeptManagerToDepartmentUsingDeptNoDepartment", testDeptManagerToOneDepartmentUsingDeptNoDepartment)
	t.Run("SalaryToEmployeeUsingEmpNoEmployee", testSalaryToOneEmployeeUsingEmpNoEmployee)
	t.Run("TitleToEmployeeUsingEmpNoEmployee", testTitleToOneEmployeeUsingEmpNoEmployee)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("DepartmentToDeptNoDeptEmps", testDepartmentToManyDeptNoDeptEmps)
	t.Run("DepartmentToDeptNoDeptManagers", testDepartmentToManyDeptNoDeptManagers)
	t.Run("EmployeeToEmpNoDeptEmps", testEmployeeToManyEmpNoDeptEmps)
	t.Run("EmployeeToEmpNoDeptManagers", testEmployeeToManyEmpNoDeptManagers)
	t.Run("EmployeeToEmpNoSalaries", testEmployeeToManyEmpNoSalaries)
	t.Run("EmployeeToEmpNoTitles", testEmployeeToManyEmpNoTitles)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("DeptEmpToEmployeeUsingEmpNoDeptEmps", testDeptEmpToOneSetOpEmployeeUsingEmpNoEmployee)
	t.Run("DeptEmpToDepartmentUsingDeptNoDeptEmps", testDeptEmpToOneSetOpDepartmentUsingDeptNoDepartment)
	t.Run("DeptManagerToEmployeeUsingEmpNoDeptManagers", testDeptManagerToOneSetOpEmployeeUsingEmpNoEmployee)
	t.Run("DeptManagerToDepartmentUsingDeptNoDeptManagers", testDeptManagerToOneSetOpDepartmentUsingDeptNoDepartment)
	t.Run("SalaryToEmployeeUsingEmpNoSalaries", testSalaryToOneSetOpEmployeeUsingEmpNoEmployee)
	t.Run("TitleToEmployeeUsingEmpNoTitles", testTitleToOneSetOpEmployeeUsingEmpNoEmployee)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("DepartmentToDeptNoDeptEmps", testDepartmentToManyAddOpDeptNoDeptEmps)
	t.Run("DepartmentToDeptNoDeptManagers", testDepartmentToManyAddOpDeptNoDeptManagers)
	t.Run("EmployeeToEmpNoDeptEmps", testEmployeeToManyAddOpEmpNoDeptEmps)
	t.Run("EmployeeToEmpNoDeptManagers", testEmployeeToManyAddOpEmpNoDeptManagers)
	t.Run("EmployeeToEmpNoSalaries", testEmployeeToManyAddOpEmpNoSalaries)
	t.Run("EmployeeToEmpNoTitles", testEmployeeToManyAddOpEmpNoTitles)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Departments", testDepartmentsReload)
	t.Run("DeptEmps", testDeptEmpsReload)
	t.Run("DeptManagers", testDeptManagersReload)
	t.Run("Employees", testEmployeesReload)
	t.Run("Salaries", testSalariesReload)
	t.Run("Titles", testTitlesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Departments", testDepartmentsReloadAll)
	t.Run("DeptEmps", testDeptEmpsReloadAll)
	t.Run("DeptManagers", testDeptManagersReloadAll)
	t.Run("Employees", testEmployeesReloadAll)
	t.Run("Salaries", testSalariesReloadAll)
	t.Run("Titles", testTitlesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Departments", testDepartmentsSelect)
	t.Run("DeptEmps", testDeptEmpsSelect)
	t.Run("DeptManagers", testDeptManagersSelect)
	t.Run("Employees", testEmployeesSelect)
	t.Run("Salaries", testSalariesSelect)
	t.Run("Titles", testTitlesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Departments", testDepartmentsUpdate)
	t.Run("DeptEmps", testDeptEmpsUpdate)
	t.Run("DeptManagers", testDeptManagersUpdate)
	t.Run("Employees", testEmployeesUpdate)
	t.Run("Salaries", testSalariesUpdate)
	t.Run("Titles", testTitlesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Departments", testDepartmentsSliceUpdateAll)
	t.Run("DeptEmps", testDeptEmpsSliceUpdateAll)
	t.Run("DeptManagers", testDeptManagersSliceUpdateAll)
	t.Run("Employees", testEmployeesSliceUpdateAll)
	t.Run("Salaries", testSalariesSliceUpdateAll)
	t.Run("Titles", testTitlesSliceUpdateAll)
}
