// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTitles(t *testing.T) {
	t.Parallel()

	query := Titles()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTitlesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Title{}
	if err = randomize.Struct(seed, o, titleDBTypes, true, titleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Title struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Titles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTitlesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Title{}
	if err = randomize.Struct(seed, o, titleDBTypes, true, titleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Title struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Titles().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Titles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTitlesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Title{}
	if err = randomize.Struct(seed, o, titleDBTypes, true, titleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Title struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TitleSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Titles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTitlesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Title{}
	if err = randomize.Struct(seed, o, titleDBTypes, true, titleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Title struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TitleExists(ctx, tx, o.EmpNo, o.Title, o.FromDate)
	if err != nil {
		t.Errorf("Unable to check if Title exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TitleExists to return true, but got false.")
	}
}

func testTitlesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Title{}
	if err = randomize.Struct(seed, o, titleDBTypes, true, titleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Title struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	titleFound, err := FindTitle(ctx, tx, o.EmpNo, o.Title, o.FromDate)
	if err != nil {
		t.Error(err)
	}

	if titleFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTitlesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Title{}
	if err = randomize.Struct(seed, o, titleDBTypes, true, titleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Title struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Titles().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTitlesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Title{}
	if err = randomize.Struct(seed, o, titleDBTypes, true, titleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Title struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Titles().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTitlesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	titleOne := &Title{}
	titleTwo := &Title{}
	if err = randomize.Struct(seed, titleOne, titleDBTypes, false, titleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Title struct: %s", err)
	}
	if err = randomize.Struct(seed, titleTwo, titleDBTypes, false, titleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Title struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = titleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = titleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Titles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTitlesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	titleOne := &Title{}
	titleTwo := &Title{}
	if err = randomize.Struct(seed, titleOne, titleDBTypes, false, titleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Title struct: %s", err)
	}
	if err = randomize.Struct(seed, titleTwo, titleDBTypes, false, titleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Title struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = titleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = titleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Titles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func titleBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Title) error {
	*o = Title{}
	return nil
}

func titleAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Title) error {
	*o = Title{}
	return nil
}

func titleAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Title) error {
	*o = Title{}
	return nil
}

func titleBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Title) error {
	*o = Title{}
	return nil
}

func titleAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Title) error {
	*o = Title{}
	return nil
}

func titleBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Title) error {
	*o = Title{}
	return nil
}

func titleAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Title) error {
	*o = Title{}
	return nil
}

func titleBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Title) error {
	*o = Title{}
	return nil
}

func titleAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Title) error {
	*o = Title{}
	return nil
}

func testTitlesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Title{}
	o := &Title{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, titleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Title object: %s", err)
	}

	AddTitleHook(boil.BeforeInsertHook, titleBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	titleBeforeInsertHooks = []TitleHook{}

	AddTitleHook(boil.AfterInsertHook, titleAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	titleAfterInsertHooks = []TitleHook{}

	AddTitleHook(boil.AfterSelectHook, titleAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	titleAfterSelectHooks = []TitleHook{}

	AddTitleHook(boil.BeforeUpdateHook, titleBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	titleBeforeUpdateHooks = []TitleHook{}

	AddTitleHook(boil.AfterUpdateHook, titleAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	titleAfterUpdateHooks = []TitleHook{}

	AddTitleHook(boil.BeforeDeleteHook, titleBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	titleBeforeDeleteHooks = []TitleHook{}

	AddTitleHook(boil.AfterDeleteHook, titleAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	titleAfterDeleteHooks = []TitleHook{}

	AddTitleHook(boil.BeforeUpsertHook, titleBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	titleBeforeUpsertHooks = []TitleHook{}

	AddTitleHook(boil.AfterUpsertHook, titleAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	titleAfterUpsertHooks = []TitleHook{}
}

func testTitlesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Title{}
	if err = randomize.Struct(seed, o, titleDBTypes, true, titleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Title struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Titles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTitlesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Title{}
	if err = randomize.Struct(seed, o, titleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Title struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(titleColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Titles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTitleToOneEmployeeUsingEmpNoEmployee(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Title
	var foreign Employee

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, titleDBTypes, false, titleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Title struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, employeeDBTypes, false, employeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.EmpNo = foreign.EmpNo
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.EmpNoEmployee().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.EmpNo != foreign.EmpNo {
		t.Errorf("want: %v, got %v", foreign.EmpNo, check.EmpNo)
	}

	ranAfterSelectHook := false
	AddEmployeeHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Employee) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TitleSlice{&local}
	if err = local.L.LoadEmpNoEmployee(ctx, tx, false, (*[]*Title)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.EmpNoEmployee == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.EmpNoEmployee = nil
	if err = local.L.LoadEmpNoEmployee(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.EmpNoEmployee == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTitleToOneSetOpEmployeeUsingEmpNoEmployee(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Title
	var b, c Employee

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, titleDBTypes, false, strmangle.SetComplement(titlePrimaryKeyColumns, titleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Employee{&b, &c} {
		err = a.SetEmpNoEmployee(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.EmpNoEmployee != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.EmpNoTitles[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.EmpNo != x.EmpNo {
			t.Error("foreign key was wrong value", a.EmpNo)
		}

		if exists, err := TitleExists(ctx, tx, a.EmpNo, a.Title, a.FromDate); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testTitlesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Title{}
	if err = randomize.Struct(seed, o, titleDBTypes, true, titleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Title struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTitlesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Title{}
	if err = randomize.Struct(seed, o, titleDBTypes, true, titleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Title struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TitleSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTitlesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Title{}
	if err = randomize.Struct(seed, o, titleDBTypes, true, titleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Title struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Titles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	titleDBTypes = map[string]string{`EmpNo`: `int`, `Title`: `varchar`, `FromDate`: `date`, `ToDate`: `date`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`}
	_            = bytes.MinRead
)

func testTitlesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(titlePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(titleAllColumns) == len(titlePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Title{}
	if err = randomize.Struct(seed, o, titleDBTypes, true, titleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Title struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Titles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, titleDBTypes, true, titlePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Title struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTitlesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(titleAllColumns) == len(titlePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Title{}
	if err = randomize.Struct(seed, o, titleDBTypes, true, titleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Title struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Titles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, titleDBTypes, true, titlePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Title struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(titleAllColumns, titlePrimaryKeyColumns) {
		fields = titleAllColumns
	} else {
		fields = strmangle.SetComplement(
			titleAllColumns,
			titlePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TitleSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTitlesUpsert(t *testing.T) {
	t.Parallel()

	if len(titleAllColumns) == len(titlePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLTitleUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Title{}
	if err = randomize.Struct(seed, &o, titleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Title struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Title: %s", err)
	}

	count, err := Titles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, titleDBTypes, false, titlePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Title struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Title: %s", err)
	}

	count, err = Titles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
