// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDeptManagers(t *testing.T) {
	t.Parallel()

	query := DeptManagers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDeptManagersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeptManager{}
	if err = randomize.Struct(seed, o, deptManagerDBTypes, true, deptManagerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptManager struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeptManagers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeptManagersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeptManager{}
	if err = randomize.Struct(seed, o, deptManagerDBTypes, true, deptManagerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptManager struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DeptManagers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeptManagers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeptManagersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeptManager{}
	if err = randomize.Struct(seed, o, deptManagerDBTypes, true, deptManagerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptManager struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DeptManagerSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeptManagers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeptManagersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeptManager{}
	if err = randomize.Struct(seed, o, deptManagerDBTypes, true, deptManagerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptManager struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DeptManagerExists(ctx, tx, o.EmpNo, o.DeptNo)
	if err != nil {
		t.Errorf("Unable to check if DeptManager exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DeptManagerExists to return true, but got false.")
	}
}

func testDeptManagersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeptManager{}
	if err = randomize.Struct(seed, o, deptManagerDBTypes, true, deptManagerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptManager struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	deptManagerFound, err := FindDeptManager(ctx, tx, o.EmpNo, o.DeptNo)
	if err != nil {
		t.Error(err)
	}

	if deptManagerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDeptManagersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeptManager{}
	if err = randomize.Struct(seed, o, deptManagerDBTypes, true, deptManagerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptManager struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DeptManagers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDeptManagersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeptManager{}
	if err = randomize.Struct(seed, o, deptManagerDBTypes, true, deptManagerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptManager struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DeptManagers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDeptManagersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	deptManagerOne := &DeptManager{}
	deptManagerTwo := &DeptManager{}
	if err = randomize.Struct(seed, deptManagerOne, deptManagerDBTypes, false, deptManagerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptManager struct: %s", err)
	}
	if err = randomize.Struct(seed, deptManagerTwo, deptManagerDBTypes, false, deptManagerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptManager struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = deptManagerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = deptManagerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DeptManagers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDeptManagersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	deptManagerOne := &DeptManager{}
	deptManagerTwo := &DeptManager{}
	if err = randomize.Struct(seed, deptManagerOne, deptManagerDBTypes, false, deptManagerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptManager struct: %s", err)
	}
	if err = randomize.Struct(seed, deptManagerTwo, deptManagerDBTypes, false, deptManagerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptManager struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = deptManagerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = deptManagerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeptManagers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func deptManagerBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DeptManager) error {
	*o = DeptManager{}
	return nil
}

func deptManagerAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DeptManager) error {
	*o = DeptManager{}
	return nil
}

func deptManagerAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DeptManager) error {
	*o = DeptManager{}
	return nil
}

func deptManagerBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DeptManager) error {
	*o = DeptManager{}
	return nil
}

func deptManagerAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DeptManager) error {
	*o = DeptManager{}
	return nil
}

func deptManagerBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DeptManager) error {
	*o = DeptManager{}
	return nil
}

func deptManagerAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DeptManager) error {
	*o = DeptManager{}
	return nil
}

func deptManagerBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DeptManager) error {
	*o = DeptManager{}
	return nil
}

func deptManagerAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DeptManager) error {
	*o = DeptManager{}
	return nil
}

func testDeptManagersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DeptManager{}
	o := &DeptManager{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, deptManagerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DeptManager object: %s", err)
	}

	AddDeptManagerHook(boil.BeforeInsertHook, deptManagerBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	deptManagerBeforeInsertHooks = []DeptManagerHook{}

	AddDeptManagerHook(boil.AfterInsertHook, deptManagerAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	deptManagerAfterInsertHooks = []DeptManagerHook{}

	AddDeptManagerHook(boil.AfterSelectHook, deptManagerAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	deptManagerAfterSelectHooks = []DeptManagerHook{}

	AddDeptManagerHook(boil.BeforeUpdateHook, deptManagerBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	deptManagerBeforeUpdateHooks = []DeptManagerHook{}

	AddDeptManagerHook(boil.AfterUpdateHook, deptManagerAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	deptManagerAfterUpdateHooks = []DeptManagerHook{}

	AddDeptManagerHook(boil.BeforeDeleteHook, deptManagerBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	deptManagerBeforeDeleteHooks = []DeptManagerHook{}

	AddDeptManagerHook(boil.AfterDeleteHook, deptManagerAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	deptManagerAfterDeleteHooks = []DeptManagerHook{}

	AddDeptManagerHook(boil.BeforeUpsertHook, deptManagerBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	deptManagerBeforeUpsertHooks = []DeptManagerHook{}

	AddDeptManagerHook(boil.AfterUpsertHook, deptManagerAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	deptManagerAfterUpsertHooks = []DeptManagerHook{}
}

func testDeptManagersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeptManager{}
	if err = randomize.Struct(seed, o, deptManagerDBTypes, true, deptManagerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptManager struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeptManagers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDeptManagersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeptManager{}
	if err = randomize.Struct(seed, o, deptManagerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DeptManager struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(deptManagerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DeptManagers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDeptManagerToOneEmployeeUsingEmpNoEmployee(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DeptManager
	var foreign Employee

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, deptManagerDBTypes, false, deptManagerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptManager struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, employeeDBTypes, false, employeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.EmpNo = foreign.EmpNo
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.EmpNoEmployee().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.EmpNo != foreign.EmpNo {
		t.Errorf("want: %v, got %v", foreign.EmpNo, check.EmpNo)
	}

	ranAfterSelectHook := false
	AddEmployeeHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Employee) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := DeptManagerSlice{&local}
	if err = local.L.LoadEmpNoEmployee(ctx, tx, false, (*[]*DeptManager)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.EmpNoEmployee == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.EmpNoEmployee = nil
	if err = local.L.LoadEmpNoEmployee(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.EmpNoEmployee == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testDeptManagerToOneDepartmentUsingDeptNoDepartment(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DeptManager
	var foreign Department

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, deptManagerDBTypes, false, deptManagerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptManager struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, departmentDBTypes, false, departmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Department struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DeptNo = foreign.DeptNo
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.DeptNoDepartment().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.DeptNo != foreign.DeptNo {
		t.Errorf("want: %v, got %v", foreign.DeptNo, check.DeptNo)
	}

	ranAfterSelectHook := false
	AddDepartmentHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Department) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := DeptManagerSlice{&local}
	if err = local.L.LoadDeptNoDepartment(ctx, tx, false, (*[]*DeptManager)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DeptNoDepartment == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.DeptNoDepartment = nil
	if err = local.L.LoadDeptNoDepartment(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DeptNoDepartment == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testDeptManagerToOneSetOpEmployeeUsingEmpNoEmployee(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DeptManager
	var b, c Employee

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, deptManagerDBTypes, false, strmangle.SetComplement(deptManagerPrimaryKeyColumns, deptManagerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Employee{&b, &c} {
		err = a.SetEmpNoEmployee(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.EmpNoEmployee != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.EmpNoDeptManagers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.EmpNo != x.EmpNo {
			t.Error("foreign key was wrong value", a.EmpNo)
		}

		if exists, err := DeptManagerExists(ctx, tx, a.EmpNo, a.DeptNo); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testDeptManagerToOneSetOpDepartmentUsingDeptNoDepartment(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DeptManager
	var b, c Department

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, deptManagerDBTypes, false, strmangle.SetComplement(deptManagerPrimaryKeyColumns, deptManagerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, departmentDBTypes, false, strmangle.SetComplement(departmentPrimaryKeyColumns, departmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, departmentDBTypes, false, strmangle.SetComplement(departmentPrimaryKeyColumns, departmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Department{&b, &c} {
		err = a.SetDeptNoDepartment(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.DeptNoDepartment != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DeptNoDeptManagers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DeptNo != x.DeptNo {
			t.Error("foreign key was wrong value", a.DeptNo)
		}

		if exists, err := DeptManagerExists(ctx, tx, a.EmpNo, a.DeptNo); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testDeptManagersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeptManager{}
	if err = randomize.Struct(seed, o, deptManagerDBTypes, true, deptManagerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptManager struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDeptManagersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeptManager{}
	if err = randomize.Struct(seed, o, deptManagerDBTypes, true, deptManagerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptManager struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DeptManagerSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDeptManagersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeptManager{}
	if err = randomize.Struct(seed, o, deptManagerDBTypes, true, deptManagerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptManager struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DeptManagers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	deptManagerDBTypes = map[string]string{`EmpNo`: `int`, `DeptNo`: `char`, `FromDate`: `date`, `ToDate`: `date`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`}
	_                  = bytes.MinRead
)

func testDeptManagersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(deptManagerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(deptManagerAllColumns) == len(deptManagerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DeptManager{}
	if err = randomize.Struct(seed, o, deptManagerDBTypes, true, deptManagerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptManager struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeptManagers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, deptManagerDBTypes, true, deptManagerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeptManager struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDeptManagersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(deptManagerAllColumns) == len(deptManagerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DeptManager{}
	if err = randomize.Struct(seed, o, deptManagerDBTypes, true, deptManagerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptManager struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeptManagers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, deptManagerDBTypes, true, deptManagerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeptManager struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(deptManagerAllColumns, deptManagerPrimaryKeyColumns) {
		fields = deptManagerAllColumns
	} else {
		fields = strmangle.SetComplement(
			deptManagerAllColumns,
			deptManagerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DeptManagerSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDeptManagersUpsert(t *testing.T) {
	t.Parallel()

	if len(deptManagerAllColumns) == len(deptManagerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDeptManagerUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DeptManager{}
	if err = randomize.Struct(seed, &o, deptManagerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DeptManager struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DeptManager: %s", err)
	}

	count, err := DeptManagers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, deptManagerDBTypes, false, deptManagerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeptManager struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DeptManager: %s", err)
	}

	count, err = DeptManagers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
