// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDeptEmps(t *testing.T) {
	t.Parallel()

	query := DeptEmps()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDeptEmpsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeptEmp{}
	if err = randomize.Struct(seed, o, deptEmpDBTypes, true, deptEmpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptEmp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeptEmps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeptEmpsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeptEmp{}
	if err = randomize.Struct(seed, o, deptEmpDBTypes, true, deptEmpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptEmp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DeptEmps().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeptEmps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeptEmpsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeptEmp{}
	if err = randomize.Struct(seed, o, deptEmpDBTypes, true, deptEmpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptEmp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DeptEmpSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeptEmps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeptEmpsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeptEmp{}
	if err = randomize.Struct(seed, o, deptEmpDBTypes, true, deptEmpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptEmp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DeptEmpExists(ctx, tx, o.EmpNo, o.DeptNo)
	if err != nil {
		t.Errorf("Unable to check if DeptEmp exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DeptEmpExists to return true, but got false.")
	}
}

func testDeptEmpsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeptEmp{}
	if err = randomize.Struct(seed, o, deptEmpDBTypes, true, deptEmpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptEmp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	deptEmpFound, err := FindDeptEmp(ctx, tx, o.EmpNo, o.DeptNo)
	if err != nil {
		t.Error(err)
	}

	if deptEmpFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDeptEmpsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeptEmp{}
	if err = randomize.Struct(seed, o, deptEmpDBTypes, true, deptEmpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptEmp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DeptEmps().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDeptEmpsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeptEmp{}
	if err = randomize.Struct(seed, o, deptEmpDBTypes, true, deptEmpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptEmp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DeptEmps().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDeptEmpsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	deptEmpOne := &DeptEmp{}
	deptEmpTwo := &DeptEmp{}
	if err = randomize.Struct(seed, deptEmpOne, deptEmpDBTypes, false, deptEmpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptEmp struct: %s", err)
	}
	if err = randomize.Struct(seed, deptEmpTwo, deptEmpDBTypes, false, deptEmpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptEmp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = deptEmpOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = deptEmpTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DeptEmps().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDeptEmpsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	deptEmpOne := &DeptEmp{}
	deptEmpTwo := &DeptEmp{}
	if err = randomize.Struct(seed, deptEmpOne, deptEmpDBTypes, false, deptEmpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptEmp struct: %s", err)
	}
	if err = randomize.Struct(seed, deptEmpTwo, deptEmpDBTypes, false, deptEmpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptEmp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = deptEmpOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = deptEmpTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeptEmps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func deptEmpBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DeptEmp) error {
	*o = DeptEmp{}
	return nil
}

func deptEmpAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DeptEmp) error {
	*o = DeptEmp{}
	return nil
}

func deptEmpAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DeptEmp) error {
	*o = DeptEmp{}
	return nil
}

func deptEmpBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DeptEmp) error {
	*o = DeptEmp{}
	return nil
}

func deptEmpAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DeptEmp) error {
	*o = DeptEmp{}
	return nil
}

func deptEmpBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DeptEmp) error {
	*o = DeptEmp{}
	return nil
}

func deptEmpAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DeptEmp) error {
	*o = DeptEmp{}
	return nil
}

func deptEmpBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DeptEmp) error {
	*o = DeptEmp{}
	return nil
}

func deptEmpAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DeptEmp) error {
	*o = DeptEmp{}
	return nil
}

func testDeptEmpsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DeptEmp{}
	o := &DeptEmp{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, deptEmpDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DeptEmp object: %s", err)
	}

	AddDeptEmpHook(boil.BeforeInsertHook, deptEmpBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	deptEmpBeforeInsertHooks = []DeptEmpHook{}

	AddDeptEmpHook(boil.AfterInsertHook, deptEmpAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	deptEmpAfterInsertHooks = []DeptEmpHook{}

	AddDeptEmpHook(boil.AfterSelectHook, deptEmpAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	deptEmpAfterSelectHooks = []DeptEmpHook{}

	AddDeptEmpHook(boil.BeforeUpdateHook, deptEmpBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	deptEmpBeforeUpdateHooks = []DeptEmpHook{}

	AddDeptEmpHook(boil.AfterUpdateHook, deptEmpAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	deptEmpAfterUpdateHooks = []DeptEmpHook{}

	AddDeptEmpHook(boil.BeforeDeleteHook, deptEmpBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	deptEmpBeforeDeleteHooks = []DeptEmpHook{}

	AddDeptEmpHook(boil.AfterDeleteHook, deptEmpAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	deptEmpAfterDeleteHooks = []DeptEmpHook{}

	AddDeptEmpHook(boil.BeforeUpsertHook, deptEmpBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	deptEmpBeforeUpsertHooks = []DeptEmpHook{}

	AddDeptEmpHook(boil.AfterUpsertHook, deptEmpAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	deptEmpAfterUpsertHooks = []DeptEmpHook{}
}

func testDeptEmpsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeptEmp{}
	if err = randomize.Struct(seed, o, deptEmpDBTypes, true, deptEmpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptEmp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeptEmps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDeptEmpsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeptEmp{}
	if err = randomize.Struct(seed, o, deptEmpDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DeptEmp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(deptEmpColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DeptEmps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDeptEmpToOneEmployeeUsingEmpNoEmployee(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DeptEmp
	var foreign Employee

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, deptEmpDBTypes, false, deptEmpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptEmp struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, employeeDBTypes, false, employeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.EmpNo = foreign.EmpNo
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.EmpNoEmployee().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.EmpNo != foreign.EmpNo {
		t.Errorf("want: %v, got %v", foreign.EmpNo, check.EmpNo)
	}

	ranAfterSelectHook := false
	AddEmployeeHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Employee) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := DeptEmpSlice{&local}
	if err = local.L.LoadEmpNoEmployee(ctx, tx, false, (*[]*DeptEmp)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.EmpNoEmployee == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.EmpNoEmployee = nil
	if err = local.L.LoadEmpNoEmployee(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.EmpNoEmployee == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testDeptEmpToOneDepartmentUsingDeptNoDepartment(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DeptEmp
	var foreign Department

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, deptEmpDBTypes, false, deptEmpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptEmp struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, departmentDBTypes, false, departmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Department struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DeptNo = foreign.DeptNo
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.DeptNoDepartment().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.DeptNo != foreign.DeptNo {
		t.Errorf("want: %v, got %v", foreign.DeptNo, check.DeptNo)
	}

	ranAfterSelectHook := false
	AddDepartmentHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Department) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := DeptEmpSlice{&local}
	if err = local.L.LoadDeptNoDepartment(ctx, tx, false, (*[]*DeptEmp)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DeptNoDepartment == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.DeptNoDepartment = nil
	if err = local.L.LoadDeptNoDepartment(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DeptNoDepartment == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testDeptEmpToOneSetOpEmployeeUsingEmpNoEmployee(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DeptEmp
	var b, c Employee

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, deptEmpDBTypes, false, strmangle.SetComplement(deptEmpPrimaryKeyColumns, deptEmpColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Employee{&b, &c} {
		err = a.SetEmpNoEmployee(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.EmpNoEmployee != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.EmpNoDeptEmps[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.EmpNo != x.EmpNo {
			t.Error("foreign key was wrong value", a.EmpNo)
		}

		if exists, err := DeptEmpExists(ctx, tx, a.EmpNo, a.DeptNo); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testDeptEmpToOneSetOpDepartmentUsingDeptNoDepartment(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DeptEmp
	var b, c Department

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, deptEmpDBTypes, false, strmangle.SetComplement(deptEmpPrimaryKeyColumns, deptEmpColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, departmentDBTypes, false, strmangle.SetComplement(departmentPrimaryKeyColumns, departmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, departmentDBTypes, false, strmangle.SetComplement(departmentPrimaryKeyColumns, departmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Department{&b, &c} {
		err = a.SetDeptNoDepartment(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.DeptNoDepartment != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DeptNoDeptEmps[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DeptNo != x.DeptNo {
			t.Error("foreign key was wrong value", a.DeptNo)
		}

		if exists, err := DeptEmpExists(ctx, tx, a.EmpNo, a.DeptNo); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testDeptEmpsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeptEmp{}
	if err = randomize.Struct(seed, o, deptEmpDBTypes, true, deptEmpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptEmp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDeptEmpsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeptEmp{}
	if err = randomize.Struct(seed, o, deptEmpDBTypes, true, deptEmpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptEmp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DeptEmpSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDeptEmpsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeptEmp{}
	if err = randomize.Struct(seed, o, deptEmpDBTypes, true, deptEmpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptEmp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DeptEmps().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	deptEmpDBTypes = map[string]string{`EmpNo`: `int`, `DeptNo`: `char`, `FromDate`: `date`, `ToDate`: `date`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`}
	_              = bytes.MinRead
)

func testDeptEmpsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(deptEmpPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(deptEmpAllColumns) == len(deptEmpPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DeptEmp{}
	if err = randomize.Struct(seed, o, deptEmpDBTypes, true, deptEmpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptEmp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeptEmps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, deptEmpDBTypes, true, deptEmpPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeptEmp struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDeptEmpsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(deptEmpAllColumns) == len(deptEmpPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DeptEmp{}
	if err = randomize.Struct(seed, o, deptEmpDBTypes, true, deptEmpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeptEmp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeptEmps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, deptEmpDBTypes, true, deptEmpPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeptEmp struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(deptEmpAllColumns, deptEmpPrimaryKeyColumns) {
		fields = deptEmpAllColumns
	} else {
		fields = strmangle.SetComplement(
			deptEmpAllColumns,
			deptEmpPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DeptEmpSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDeptEmpsUpsert(t *testing.T) {
	t.Parallel()

	if len(deptEmpAllColumns) == len(deptEmpPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDeptEmpUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DeptEmp{}
	if err = randomize.Struct(seed, &o, deptEmpDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DeptEmp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DeptEmp: %s", err)
	}

	count, err := DeptEmps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, deptEmpDBTypes, false, deptEmpPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeptEmp struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DeptEmp: %s", err)
	}

	count, err = DeptEmps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
