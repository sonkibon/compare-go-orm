// Code generated by ent, DO NOT EDIT.

package employee

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the employee type in the database.
	Label = "employee"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBirthDate holds the string denoting the birth_date field in the database.
	FieldBirthDate = "birth_date"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldHireDate holds the string denoting the hire_date field in the database.
	FieldHireDate = "hire_date"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeDeptManager holds the string denoting the dept_manager edge name in mutations.
	EdgeDeptManager = "dept_manager"
	// Table holds the table name of the employee in the database.
	Table = "employees"
	// DeptManagerTable is the table that holds the dept_manager relation/edge.
	DeptManagerTable = "dept_managers"
	// DeptManagerInverseTable is the table name for the DeptManager entity.
	// It exists in this package in order to avoid circular dependency with the "deptmanager" package.
	DeptManagerInverseTable = "dept_managers"
	// DeptManagerColumn is the table column denoting the dept_manager relation/edge.
	DeptManagerColumn = "employee_dept_manager"
)

// Columns holds all SQL columns for employee fields.
var Columns = []string{
	FieldID,
	FieldBirthDate,
	FieldFirstName,
	FieldLastName,
	FieldGender,
	FieldHireDate,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)

// Gender defines the type for the "gender" enum field.
type Gender string

// Gender values.
const (
	GenderM Gender = "M"
	GenderF Gender = "F"
)

func (ge Gender) String() string {
	return string(ge)
}

// GenderValidator is a validator for the "gender" field enum values. It is called by the builders before save.
func GenderValidator(ge Gender) error {
	switch ge {
	case GenderM, GenderF:
		return nil
	default:
		return fmt.Errorf("employee: invalid enum value for gender field: %q", ge)
	}
}

// OrderOption defines the ordering options for the Employee queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBirthDate orders the results by the birth_date field.
func ByBirthDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBirthDate, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the last_name field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByGender orders the results by the gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByHireDate orders the results by the hire_date field.
func ByHireDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHireDate, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeptManagerCount orders the results by dept_manager count.
func ByDeptManagerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeptManagerStep(), opts...)
	}
}

// ByDeptManager orders the results by dept_manager terms.
func ByDeptManager(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeptManagerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDeptManagerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeptManagerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DeptManagerTable, DeptManagerColumn),
	)
}
