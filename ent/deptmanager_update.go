// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sonkibon/compare-go-orm/ent/department"
	"github.com/sonkibon/compare-go-orm/ent/deptmanager"
	"github.com/sonkibon/compare-go-orm/ent/employee"
	"github.com/sonkibon/compare-go-orm/ent/predicate"
)

// DeptManagerUpdate is the builder for updating DeptManager entities.
type DeptManagerUpdate struct {
	config
	hooks    []Hook
	mutation *DeptManagerMutation
}

// Where appends a list predicates to the DeptManagerUpdate builder.
func (dmu *DeptManagerUpdate) Where(ps ...predicate.DeptManager) *DeptManagerUpdate {
	dmu.mutation.Where(ps...)
	return dmu
}

// SetFromDate sets the "from_date" field.
func (dmu *DeptManagerUpdate) SetFromDate(t time.Time) *DeptManagerUpdate {
	dmu.mutation.SetFromDate(t)
	return dmu
}

// SetToDate sets the "to_date" field.
func (dmu *DeptManagerUpdate) SetToDate(t time.Time) *DeptManagerUpdate {
	dmu.mutation.SetToDate(t)
	return dmu
}

// SetCreatedAt sets the "created_at" field.
func (dmu *DeptManagerUpdate) SetCreatedAt(t time.Time) *DeptManagerUpdate {
	dmu.mutation.SetCreatedAt(t)
	return dmu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dmu *DeptManagerUpdate) SetNillableCreatedAt(t *time.Time) *DeptManagerUpdate {
	if t != nil {
		dmu.SetCreatedAt(*t)
	}
	return dmu
}

// SetUpdatedAt sets the "updated_at" field.
func (dmu *DeptManagerUpdate) SetUpdatedAt(t time.Time) *DeptManagerUpdate {
	dmu.mutation.SetUpdatedAt(t)
	return dmu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dmu *DeptManagerUpdate) SetNillableUpdatedAt(t *time.Time) *DeptManagerUpdate {
	if t != nil {
		dmu.SetUpdatedAt(*t)
	}
	return dmu
}

// SetEmployeeID sets the "employee" edge to the Employee entity by ID.
func (dmu *DeptManagerUpdate) SetEmployeeID(id int) *DeptManagerUpdate {
	dmu.mutation.SetEmployeeID(id)
	return dmu
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (dmu *DeptManagerUpdate) SetEmployee(e *Employee) *DeptManagerUpdate {
	return dmu.SetEmployeeID(e.ID)
}

// SetDepartmentID sets the "department" edge to the Department entity by ID.
func (dmu *DeptManagerUpdate) SetDepartmentID(id int) *DeptManagerUpdate {
	dmu.mutation.SetDepartmentID(id)
	return dmu
}

// SetDepartment sets the "department" edge to the Department entity.
func (dmu *DeptManagerUpdate) SetDepartment(d *Department) *DeptManagerUpdate {
	return dmu.SetDepartmentID(d.ID)
}

// Mutation returns the DeptManagerMutation object of the builder.
func (dmu *DeptManagerUpdate) Mutation() *DeptManagerMutation {
	return dmu.mutation
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (dmu *DeptManagerUpdate) ClearEmployee() *DeptManagerUpdate {
	dmu.mutation.ClearEmployee()
	return dmu
}

// ClearDepartment clears the "department" edge to the Department entity.
func (dmu *DeptManagerUpdate) ClearDepartment() *DeptManagerUpdate {
	dmu.mutation.ClearDepartment()
	return dmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dmu *DeptManagerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dmu.sqlSave, dmu.mutation, dmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dmu *DeptManagerUpdate) SaveX(ctx context.Context) int {
	affected, err := dmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dmu *DeptManagerUpdate) Exec(ctx context.Context) error {
	_, err := dmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmu *DeptManagerUpdate) ExecX(ctx context.Context) {
	if err := dmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dmu *DeptManagerUpdate) check() error {
	if _, ok := dmu.mutation.EmployeeID(); dmu.mutation.EmployeeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DeptManager.employee"`)
	}
	if _, ok := dmu.mutation.DepartmentID(); dmu.mutation.DepartmentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DeptManager.department"`)
	}
	return nil
}

func (dmu *DeptManagerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(deptmanager.Table, deptmanager.Columns, sqlgraph.NewFieldSpec(deptmanager.FieldID, field.TypeInt))
	if ps := dmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dmu.mutation.FromDate(); ok {
		_spec.SetField(deptmanager.FieldFromDate, field.TypeTime, value)
	}
	if value, ok := dmu.mutation.ToDate(); ok {
		_spec.SetField(deptmanager.FieldToDate, field.TypeTime, value)
	}
	if value, ok := dmu.mutation.CreatedAt(); ok {
		_spec.SetField(deptmanager.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := dmu.mutation.UpdatedAt(); ok {
		_spec.SetField(deptmanager.FieldUpdatedAt, field.TypeTime, value)
	}
	if dmu.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deptmanager.EmployeeTable,
			Columns: []string{deptmanager.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmu.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deptmanager.EmployeeTable,
			Columns: []string{deptmanager.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dmu.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deptmanager.DepartmentTable,
			Columns: []string{deptmanager.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmu.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deptmanager.DepartmentTable,
			Columns: []string{deptmanager.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deptmanager.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dmu.mutation.done = true
	return n, nil
}

// DeptManagerUpdateOne is the builder for updating a single DeptManager entity.
type DeptManagerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeptManagerMutation
}

// SetFromDate sets the "from_date" field.
func (dmuo *DeptManagerUpdateOne) SetFromDate(t time.Time) *DeptManagerUpdateOne {
	dmuo.mutation.SetFromDate(t)
	return dmuo
}

// SetToDate sets the "to_date" field.
func (dmuo *DeptManagerUpdateOne) SetToDate(t time.Time) *DeptManagerUpdateOne {
	dmuo.mutation.SetToDate(t)
	return dmuo
}

// SetCreatedAt sets the "created_at" field.
func (dmuo *DeptManagerUpdateOne) SetCreatedAt(t time.Time) *DeptManagerUpdateOne {
	dmuo.mutation.SetCreatedAt(t)
	return dmuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dmuo *DeptManagerUpdateOne) SetNillableCreatedAt(t *time.Time) *DeptManagerUpdateOne {
	if t != nil {
		dmuo.SetCreatedAt(*t)
	}
	return dmuo
}

// SetUpdatedAt sets the "updated_at" field.
func (dmuo *DeptManagerUpdateOne) SetUpdatedAt(t time.Time) *DeptManagerUpdateOne {
	dmuo.mutation.SetUpdatedAt(t)
	return dmuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dmuo *DeptManagerUpdateOne) SetNillableUpdatedAt(t *time.Time) *DeptManagerUpdateOne {
	if t != nil {
		dmuo.SetUpdatedAt(*t)
	}
	return dmuo
}

// SetEmployeeID sets the "employee" edge to the Employee entity by ID.
func (dmuo *DeptManagerUpdateOne) SetEmployeeID(id int) *DeptManagerUpdateOne {
	dmuo.mutation.SetEmployeeID(id)
	return dmuo
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (dmuo *DeptManagerUpdateOne) SetEmployee(e *Employee) *DeptManagerUpdateOne {
	return dmuo.SetEmployeeID(e.ID)
}

// SetDepartmentID sets the "department" edge to the Department entity by ID.
func (dmuo *DeptManagerUpdateOne) SetDepartmentID(id int) *DeptManagerUpdateOne {
	dmuo.mutation.SetDepartmentID(id)
	return dmuo
}

// SetDepartment sets the "department" edge to the Department entity.
func (dmuo *DeptManagerUpdateOne) SetDepartment(d *Department) *DeptManagerUpdateOne {
	return dmuo.SetDepartmentID(d.ID)
}

// Mutation returns the DeptManagerMutation object of the builder.
func (dmuo *DeptManagerUpdateOne) Mutation() *DeptManagerMutation {
	return dmuo.mutation
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (dmuo *DeptManagerUpdateOne) ClearEmployee() *DeptManagerUpdateOne {
	dmuo.mutation.ClearEmployee()
	return dmuo
}

// ClearDepartment clears the "department" edge to the Department entity.
func (dmuo *DeptManagerUpdateOne) ClearDepartment() *DeptManagerUpdateOne {
	dmuo.mutation.ClearDepartment()
	return dmuo
}

// Where appends a list predicates to the DeptManagerUpdate builder.
func (dmuo *DeptManagerUpdateOne) Where(ps ...predicate.DeptManager) *DeptManagerUpdateOne {
	dmuo.mutation.Where(ps...)
	return dmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dmuo *DeptManagerUpdateOne) Select(field string, fields ...string) *DeptManagerUpdateOne {
	dmuo.fields = append([]string{field}, fields...)
	return dmuo
}

// Save executes the query and returns the updated DeptManager entity.
func (dmuo *DeptManagerUpdateOne) Save(ctx context.Context) (*DeptManager, error) {
	return withHooks(ctx, dmuo.sqlSave, dmuo.mutation, dmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dmuo *DeptManagerUpdateOne) SaveX(ctx context.Context) *DeptManager {
	node, err := dmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dmuo *DeptManagerUpdateOne) Exec(ctx context.Context) error {
	_, err := dmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmuo *DeptManagerUpdateOne) ExecX(ctx context.Context) {
	if err := dmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dmuo *DeptManagerUpdateOne) check() error {
	if _, ok := dmuo.mutation.EmployeeID(); dmuo.mutation.EmployeeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DeptManager.employee"`)
	}
	if _, ok := dmuo.mutation.DepartmentID(); dmuo.mutation.DepartmentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DeptManager.department"`)
	}
	return nil
}

func (dmuo *DeptManagerUpdateOne) sqlSave(ctx context.Context) (_node *DeptManager, err error) {
	if err := dmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(deptmanager.Table, deptmanager.Columns, sqlgraph.NewFieldSpec(deptmanager.FieldID, field.TypeInt))
	id, ok := dmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeptManager.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deptmanager.FieldID)
		for _, f := range fields {
			if !deptmanager.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deptmanager.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dmuo.mutation.FromDate(); ok {
		_spec.SetField(deptmanager.FieldFromDate, field.TypeTime, value)
	}
	if value, ok := dmuo.mutation.ToDate(); ok {
		_spec.SetField(deptmanager.FieldToDate, field.TypeTime, value)
	}
	if value, ok := dmuo.mutation.CreatedAt(); ok {
		_spec.SetField(deptmanager.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := dmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(deptmanager.FieldUpdatedAt, field.TypeTime, value)
	}
	if dmuo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deptmanager.EmployeeTable,
			Columns: []string{deptmanager.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmuo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deptmanager.EmployeeTable,
			Columns: []string{deptmanager.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dmuo.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deptmanager.DepartmentTable,
			Columns: []string{deptmanager.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmuo.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deptmanager.DepartmentTable,
			Columns: []string{deptmanager.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeptManager{config: dmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deptmanager.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dmuo.mutation.done = true
	return _node, nil
}
